"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Publisher = void 0;
const microservices_1 = require("@nestjs/microservices");
const common_1 = require("@nestjs/common");
const create_stan_connection_1 = require("./utils/create-stan-connection");
const constants_1 = require("./constants");
let Publisher = class Publisher extends microservices_1.ClientProxy {
    constructor(options) {
        super();
        this.options = options;
        this.logger = new common_1.Logger(this.constructor.name);
    }
    publish(packet, callback) {
        this.connection.publish(packet.pattern, JSON.stringify(packet.data), (err, guid) => {
            if (err) {
                callback({ err });
            }
            else {
                callback({ response: guid });
            }
        });
        return () => { };
    }
    async onApplicationBootstrap() {
        this.connection = await (0, create_stan_connection_1.createConnection)(this.options.clusterId, this.options.clientId, this.options.connectOptions);
        this.logger.log("Publisher - Connected early to nats.");
    }
    async connect() {
        if (this.connection) {
            return Promise.resolve(this.connection);
        }
        this.connection = await (0, create_stan_connection_1.createConnection)(this.options.clusterId, this.options.clientId, this.options.connectOptions);
        this.logger.log("Publisher - Connected to nats.");
    }
    close() {
        this.connection.close();
        this.connection = null;
    }
    async dispatchEvent(packet) {
        return new Promise((resolve, reject) => {
            const guid = this.connection.publish(packet.pattern, JSON.stringify(packet.data), (err) => {
                if (err) {
                    reject(err);
                }
                resolve(guid);
            });
        });
    }
};
Publisher = __decorate([
    (0, common_1.Injectable)(),
    __param(0, (0, common_1.Inject)(constants_1.NATS_STREAMING_OPTIONS)),
    __metadata("design:paramtypes", [Object])
], Publisher);
exports.Publisher = Publisher;
//# sourceMappingURL=publisher.js.map